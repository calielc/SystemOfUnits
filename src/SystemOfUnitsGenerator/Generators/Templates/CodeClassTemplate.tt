<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# foreach (var usingNamespace in UsingNamespaces) { #>
using <#= usingNamespace.Name #>;
<# } #>

namespace <#= Namespace #> {
<# if (XmlDoc != null) { #>
    /// <summary>
<# foreach (var line in XmlDoc.Summary) { #>
    /// <#= line #>
<# } #>
    /// </summary>
<# } #>
    [Serializable]
    [JsonConverter(typeof(UnitJsonConverter))]
    [DebuggerDisplay("{Value} <#= Symbol #>")]
    public readonly partial struct <#= ClassName #> : IUnit, 
        IFormattable,
        ICloneable,
        IEquatable<<#= ClassName #>>,
        IComparable,
        IComparable<<#= ClassName #>> {
        public const string Symbol = "<#= Symbol #>";

        public <#= ClassName #>(double value) {
            Value = value;
        }

        public double Value { get; }

        public bool Equals(<#= ClassName #> other) => Math.Abs(Value - other.Value) < 1e-6;

        public int CompareTo(<#= ClassName #> other) => Value.CompareTo(other.Value);

        public int CompareTo(object obj) {
            switch (obj) {
                case null:
                    return 1;

                case <#= ClassName #> other:
                    return CompareTo(other);

                default:
                    throw new ArgumentException($"Object must be of type {nameof(<#= ClassName #>)}");
            }
        }

        public string ToString(string format, IFormatProvider formatProvider)
            => string.Format(format ?? "{0} <#= Symbol #>", Value, formatProvider);

        public override bool Equals(object obj) {
            if (obj is null) {
                return false;
            }
            return obj is <#= ClassName #> other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => $"{Value:e} <#= Symbol #>";

        string IUnit.Symbol => Symbol;

        object ICloneable.Clone() => new <#= ClassName #>(Value);

        public static bool operator ==(<#= ClassName #> self, <#= ClassName #> other) => self.Equals(other);
        public static bool operator !=(<#= ClassName #> self, <#= ClassName #> other) => !self.Equals(other);

        public static bool operator <(<#= ClassName #> self, <#= ClassName #> other) => self.CompareTo(other) < 0;
        public static bool operator >(<#= ClassName #> self, <#= ClassName #> other) => self.CompareTo(other) > 0;
        public static bool operator <=(<#= ClassName #> self, <#= ClassName #> other) => self.CompareTo(other) <= 0;
        public static bool operator >=(<#= ClassName #> self, <#= ClassName #> other) => self.CompareTo(other) >= 0;

        public static <#= ClassName #> operator +(<#= ClassName #> self, <#= ClassName #> other) => new <#= ClassName #>(self.Value + other.Value);
        public static <#= ClassName #> operator -(<#= ClassName #> self, <#= ClassName #> other) => new <#= ClassName #>(self.Value - other.Value);

        public static <#= ClassName #> operator *(<#= ClassName #> self, double other) => new <#= ClassName #>(self.Value * other);
        public static <#= ClassName #> operator *(double self, <#= ClassName #> other) => new <#= ClassName #>(self * other.Value);

        public static <#= ClassName #> operator /(<#= ClassName #> self, double other) => new <#= ClassName #>(self.Value / other);

        public static explicit operator double(<#= ClassName #> self) => self.Value;
        public static explicit operator <#= ClassName #>(double self) => new <#= ClassName #>(self);
    }
}