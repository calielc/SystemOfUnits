// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SystemOfUnitsGenerator.GeneratorsCurrency.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class TestClassTemplate : TestClassTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 6 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
 foreach (var usingNamespace in UsingNamespaces) { 
            
            #line default
            #line hidden
            this.Write("using ");
            
            #line 7 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(usingNamespace));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 8 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 10 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TestClass.Namespace));
            
            #line default
            #line hidden
            this.Write(" {\r\n    using ");
            
            #line 11 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 11 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n    [Parallelizable(ParallelScope.Default)]\r\n    public sealed partial class" +
                    " ");
            
            #line 14 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TestClass.Class));
            
            #line default
            #line hidden
            this.Write(" {\r\n        [Test]\r\n        public void Should_have_symbol_on_class() {\r\n        " +
                    "    Assert.AreEqual(\"");
            
            #line 17 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Symbol));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 17 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(".Symbol);\r\n        }\r\n\r\n        public static readonly decimal[] CasesValues = { " +
                    "-7.65m, 0m, 1.7578m };\r\n\r\n        [TestCaseSource(nameof(CasesValues))]\r\n       " +
                    " public void Should_initialize_instance(decimal value) {\r\n            var actual" +
                    " = new ");
            
            #line 24 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("(value);\r\n\r\n            Assert.IsAssignableFrom<");
            
            #line 26 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(">(actual);\r\n            Assert.AreEqual(value, actual.Value, nameof(actual.Value)" +
                    ");\r\n        }\r\n\r\n        [TestCaseSource(nameof(CasesValues))]\r\n        public v" +
                    "oid Should_have_a_symbol(decimal value) {\r\n            ICurrency actual = new ");
            
            #line 32 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("(value);\r\n\r\n            Assert.AreEqual(");
            
            #line 34 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@".Symbol, actual.Symbol);
        }

        [TestCase(-8.9d, -9d)]
        [TestCase(-7.1d, -8d)]
        [TestCase(-6.0d, -6d)]
        [TestCase(0d, 0d)]
        [TestCase(12.0d, 12d)]
        [TestCase(13.1d, 13d)]
        [TestCase(14.9d, 14d)]
        public void Should_floor_value(double value, double expectedValue) {
            var expected = new ");
            
            #line 45 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 47 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)value);
            var actual = instance.Floor();

            Assert.AreEqual(expected, actual);
        }

        [TestCase(-7.9d, -8d)]
        [TestCase(-6.6d, -7d)]
        [TestCase(-5.5d, -6d)]
        [TestCase(-4.1d, -4d)]
        [TestCase(-3.0d, -3d)]
        [TestCase(0d, 0d)]
        [TestCase(12.0d, 12d)]
        [TestCase(13.1d, 13d)]
        [TestCase(14.5d, 14d)]
        [TestCase(15.6d, 16d)]
        [TestCase(16.9d, 17d)]
        public void Should_round_value(double value, double expectedValue) {
            var expected = new ");
            
            #line 65 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 67 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)value);
            var actual = instance.Round();

            Assert.AreEqual(expected, actual);
        }

        [TestCase(-7.59d, -7.6d)]
        [TestCase(-6.46d, -6.5d)]
        [TestCase(-5.35d, -5.4d)]
        [TestCase(-4.21d, -4.2d)]
        [TestCase(-3.10d, -3.1d)]
        [TestCase(0d, 0d)]
        [TestCase(12.30d, 12.3d)]
        [TestCase(13.41d, 13.4d)]
        [TestCase(14.55d, 14.6d)]
        [TestCase(15.66d, 15.7d)]
        [TestCase(16.79d, 16.8d)]
        public void Should_round_value_withDigit(double value, double expectedValue) {
            var expected = new ");
            
            #line 85 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 87 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)value);\r\n            var actual = instance.Round(1);\r\n\r\n            Ass" +
                    "ert.AreEqual(expected, actual);\r\n        }\r\n\r\n        [TestCase(MidpointRounding" +
                    ".AwayFromZero, -7.9d, -8d)]\r\n        [TestCase(MidpointRounding.AwayFromZero, -6" +
                    ".6d, -7d)]\r\n        [TestCase(MidpointRounding.AwayFromZero, -5.5d, -6d)]\r\n     " +
                    "   [TestCase(MidpointRounding.AwayFromZero, -4.1d, -4d)]\r\n        [TestCase(Midp" +
                    "ointRounding.AwayFromZero, -3.0d, -3d)]\r\n        [TestCase(MidpointRounding.Away" +
                    "FromZero, 0d, 0d)]\r\n        [TestCase(MidpointRounding.AwayFromZero, 12.0d, 12d)" +
                    "]\r\n        [TestCase(MidpointRounding.AwayFromZero, 13.1d, 13d)]\r\n        [TestC" +
                    "ase(MidpointRounding.AwayFromZero, 14.5d, 15d)]\r\n        [TestCase(MidpointRound" +
                    "ing.AwayFromZero, 15.6d, 16d)]\r\n        [TestCase(MidpointRounding.AwayFromZero," +
                    " 16.9d, 17d)]\r\n        [TestCase(MidpointRounding.ToEven, -7.9d, -8d)]\r\n        " +
                    "[TestCase(MidpointRounding.ToEven, -6.6d, -7d)]\r\n        [TestCase(MidpointRound" +
                    "ing.ToEven, -5.5d, -6d)]\r\n        [TestCase(MidpointRounding.ToEven, -4.1d, -4d)" +
                    "]\r\n        [TestCase(MidpointRounding.ToEven, -3.0d, -3d)]\r\n        [TestCase(Mi" +
                    "dpointRounding.ToEven, 0d, 0d)]\r\n        [TestCase(MidpointRounding.ToEven, 12.0" +
                    "d, 12d)]\r\n        [TestCase(MidpointRounding.ToEven, 13.1d, 13d)]\r\n        [Test" +
                    "Case(MidpointRounding.ToEven, 14.5d, 14d)]\r\n        [TestCase(MidpointRounding.T" +
                    "oEven, 15.6d, 16d)]\r\n        [TestCase(MidpointRounding.ToEven, 16.9d, 17d)]\r\n  " +
                    "      public void Should_roundvalue_withMode(MidpointRounding mode, double value" +
                    ", double expectedValue) {\r\n            var expected = new ");
            
            #line 116 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 118 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)value);
            var actual = instance.Round(mode);

            Assert.AreEqual(expected, actual);
        }

        [TestCase(-8.9d, -8d)]
        [TestCase(-7.1d, -7d)]
        [TestCase(-6.0d, -6d)]
        [TestCase(0d, 0d)]
        [TestCase(12.0d, 12d)]
        [TestCase(13.1d, 14d)]
        [TestCase(14.9d, 15d)]
        public void Should_ceiling_value(double value, double expectedValue) {
            var expected = new ");
            
            #line 132 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 134 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)value);
            var actual = instance.Ceiling();

            Assert.AreEqual(expected, actual);
        }

        [TestCase(-7.9d, -7d)]
        [TestCase(-6.6d, -6d)]
        [TestCase(-5.5d, -5d)]
        [TestCase(-4.1d, -4d)]
        [TestCase(-3.0d, -3d)]
        [TestCase(0d, 0d)]
        [TestCase(12.0d, 12d)]
        [TestCase(13.1d, 13d)]
        [TestCase(14.5d, 14d)]
        [TestCase(15.6d, 15d)]
        [TestCase(16.9d, 16d)]
        public void Should_truncate_value(double value, double expectedValue) {
            var expected = new ");
            
            #line 152 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 154 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)value);
            var actual = instance.Truncate();

            Assert.AreEqual(expected, actual);
        }

        [TestCase(-8.9d, 8.9d)]
        [TestCase(-7.1d, 7.1d)]
        [TestCase(-6.0d, 6.0d)]
        [TestCase(0d, 0d)]
        [TestCase(12.0d, 12.0d)]
        [TestCase(13.1d, 13.1d)]
        [TestCase(14.9d, 14.9d)]
        public void Should_absolute_value(double value, double expectedValue) {
            var expected = new ");
            
            #line 168 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 170 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)value);
            var actual = instance.Abs();

            Assert.AreEqual(expected, actual);
        }

        [TestCaseSource(nameof(CasesValues))]
        public void Should_cast_from_decimal(decimal value) {
            var expected = new ");
            
            #line 178 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("(value);\r\n\r\n            var actual = (");
            
            #line 180 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(")value;\r\n\r\n            Assert.AreEqual(expected, actual);\r\n        }\r\n\r\n        [" +
                    "TestCaseSource(nameof(CasesValues))]\r\n        public void Should_cast_to_decimal" +
                    "(decimal value) {\r\n            var instance = new ");
            
            #line 187 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"(value);

            var actual = (decimal)instance;

            Assert.AreEqual(value, actual);
        }

        [TestCaseSource(nameof(CasesValues))]
        public void Should_compare_with_same_value(decimal value) {
            var baseInstance = new ");
            
            #line 196 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("(value);\r\n            var otherInstance = new ");
            
            #line 197 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"(value);

            Assert.IsTrue(baseInstance.Equals(otherInstance), ""Equals"");
            Assert.IsTrue(baseInstance.Equals((object)otherInstance), ""Equals object"");

            Assert.IsTrue(baseInstance == otherInstance, ""=="");
            Assert.IsFalse(baseInstance != otherInstance, ""!="");

            Assert.AreEqual(0, baseInstance.CompareTo(otherInstance), ""CompareTo"");
            Assert.AreEqual(0, baseInstance.CompareTo((object)otherInstance), ""CompareTo object"");

            Assert.IsFalse(baseInstance < otherInstance, ""<"");
            Assert.IsFalse(baseInstance > otherInstance, "">"");

            Assert.IsTrue(baseInstance <= otherInstance, ""<="");
            Assert.IsTrue(baseInstance >= otherInstance, "">="");
        }

        [TestCase(-7.65d, -1000)]
        [TestCase(-7.65d, -7.66d)]
        [TestCase(0d, -0.9999)]
        [TestCase(0d, -100)]
        [TestCase(1.757899e2, 1.757898e2)]
        [TestCase(1.757899e2, 0)]
        public void Should_compare_with_smaller_value(double baseValue, double smallerValue) {
            var baseInstance = new ");
            
            #line 222 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)baseValue);\r\n            var smallerInstance = new ");
            
            #line 223 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)smallerValue);

            Assert.IsFalse(baseInstance.Equals(smallerInstance), ""Equals"");
            Assert.IsFalse(baseInstance.Equals((object)smallerInstance), ""Equals object"");

            Assert.IsFalse(baseInstance == smallerInstance, ""=="");
            Assert.IsTrue(baseInstance != smallerInstance, ""!="");

            Assert.AreEqual(+1, baseInstance.CompareTo(smallerInstance), ""CompareTo"");
            Assert.AreEqual(+1, baseInstance.CompareTo((object)smallerInstance), ""CompareTo object"");

            Assert.IsFalse(baseInstance < smallerInstance, ""<"");
            Assert.IsTrue(baseInstance > smallerInstance, "">"");

            Assert.IsFalse(baseInstance <= smallerInstance, ""<="");
            Assert.IsTrue(baseInstance >= smallerInstance, "">="");
        }

        [TestCase(-7.65d, 1000)]
        [TestCase(-7.65d, -7.64d)]
        [TestCase(0d, 0.00001)]
        [TestCase(0d, 100)]
        [TestCase(1.757899e2, 1.7578991e2)]
        [TestCase(1.757899e2, 1000000)]
        public void Should_compare_with_bigger_value(double baseValue, double biggerValue) {
            var baseInstance = new ");
            
            #line 248 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)baseValue);\r\n            var biggerInstance = new ");
            
            #line 249 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)biggerValue);

            Assert.IsFalse(baseInstance.Equals(biggerInstance), ""Equals"");
            Assert.IsFalse(baseInstance.Equals((object)biggerInstance), ""Equals object"");

            Assert.IsFalse(baseInstance == biggerInstance, ""=="");
            Assert.IsTrue(baseInstance != biggerInstance, ""!="");

            Assert.AreEqual(-1, baseInstance.CompareTo(biggerInstance), ""CompareTo"");
            Assert.AreEqual(-1, baseInstance.CompareTo((object)biggerInstance), ""CompareTo object"");

            Assert.IsTrue(baseInstance < biggerInstance, ""<"");
            Assert.IsFalse(baseInstance > biggerInstance, "">"");

            Assert.IsTrue(baseInstance <= biggerInstance, ""<="");
            Assert.IsFalse(baseInstance >= biggerInstance, "">="");
        }

        [TestCaseSource(nameof(CasesValues))]
        public void Should_compare_with_null_instance(decimal value) {
            var instance = new ");
            
            #line 269 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"(value);

            Assert.IsFalse(instance.Equals(null), ""Equals"");
            Assert.AreEqual(1, instance.CompareTo(null), ""CompareTo"");
        }

        [TestCaseSource(nameof(CasesValues))]
        public void Should_compare_with_another_type_of_instance(decimal value) {
            var instance1 = new ");
            
            #line 277 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"(value);
            object instance2 = value;

            Assert.IsFalse(instance1.Equals(instance2), ""Equals"");
            Assert.Throws<ArgumentException>(() => instance1.CompareTo(instance2), ""CompareTo"");
        }

        [TestCase(0d, -7.65d, -7.65d)]
        [TestCase(0d, 0d, 0d)]
        [TestCase(0d, 1.757899e2, 1.757899e2)]
        [TestCase(1.757899e2, 0d, 1.757899e2)]
        [TestCase(578.78d, -32.34d, 546.44d)]
        [TestCase(578.78d, 32.34d, 611.12d)]
        public void Should_sum_two_instances(double leftValue, double rightValue, double expectedValue) {
            var expected = new ");
            
            #line 291 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var leftInstance = new ");
            
            #line 293 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)leftValue);\r\n            var rightInstance = new ");
            
            #line 294 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)rightValue);
            var actual = leftInstance + rightInstance;

            Assert.AreEqual(expected, actual);
        }

        [TestCase(0d, -7.65d, +7.65d)]
        [TestCase(0d, 0d, 0d)]
        [TestCase(0d, 1.757899e2, -1.757899e2)]
        [TestCase(1.757899e2, 0d, 1.757899e2)]
        [TestCase(578.78d, -32.34d, 611.12d)]
        [TestCase(578.78d, 32.34d, 546.44d)]
        public void Should_subtract_two_instances(double leftValue, double rightValue, double expectedValue) {
            var expected = new ");
            
            #line 307 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var leftInstance = new ");
            
            #line 309 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)leftValue);\r\n            var rightInstance = new ");
            
            #line 310 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)rightValue);
            var actual = leftInstance - rightInstance;

            Assert.AreEqual(expected, actual);
        }

        [TestCase(0d, -7.65d, 0d)]
        [TestCase(0d, 0d, 0d)]
        [TestCase(0d, 1.757899e2, 0d)]
        [TestCase(1.757899e2, 0d, 0d)]
        [TestCase(123.87d, 0.25d, 30.9675d)]
        [TestCase(578.78d, -32.34d, -18717.7452d)]
        [TestCase(-32.34d, 578.78d, -18717.7452d)]
        [TestCase(578.78d, 32.34d, 18717.7452d)]
        public void Should_multiply_instance_by_decimal(double leftValue, double rightValue, double expectedValue) {
            var expected = new ");
            
            #line 325 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 327 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)leftValue);

            var actual = instance * (decimal)rightValue;
            Assert.AreEqual(expected, actual);
        }

        [TestCase(0d, -7.65d, 0d)]
        [TestCase(0d, 0d, 0d)]
        [TestCase(0d, 1.757899e2, 0d)]
        [TestCase(1.757899e2, 0d, 0d)]
        [TestCase(123.87d, 0.25d, 30.9675d)]
        [TestCase(578.78d, -32.34d, -18717.7452d)]
        [TestCase(-32.34d, 578.78d, -18717.7452d)]
        [TestCase(578.78d, 32.34d, 18717.7452d)]
        public void Should_multiply_decimal_by_instance(double leftValue, double rightValue, double expectedValue) {
            var expected = new ");
            
            #line 342 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 344 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)rightValue);

            var actual = (decimal)leftValue * instance;
            Assert.AreEqual(expected, actual);
        }

        [TestCase(0d, -7.65d, 0d)]
        [TestCase(0d, 1.757899e2, 0d)]
        [TestCase(123.87d, 0.25d, 495.48d)]
        [TestCase(500d, -2.5d, -200d)]
        [TestCase(500d, 2.5d, 200d)]
        [TestCase(-2.5d, 500d, -0.005d)]
        [TestCase(2.5d, 500d, 0.005d)]
        public void Should_divide_instance_by_decimal(double leftValue, double rightValue, double expectedValue) {
            var expected = new ");
            
            #line 358 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("((decimal)expectedValue);\r\n\r\n            var instance = new ");
            
            #line 360 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"((decimal)leftValue);
            var actual = instance / (decimal)rightValue;

            Assert.AreEqual(expected, actual);
        }

        [TestCaseSource(nameof(CasesValues))]
        public void Should_throw_exception_on_division_by_zero(decimal value) {
            var instance = new ");
            
            #line 368 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"(value);

            Assert.Throws<DivideByZeroException>(() => {
                var unused = instance / 0;
            });
        }

        [TestCaseSource(nameof(CasesValues))]
        public void Should_convert_to_string(decimal value) {
            var expected = $""");
            
            #line 377 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Symbol));
            
            #line default
            #line hidden
            this.Write(" {value:0.00}\";\r\n\r\n            var instance = new ");
            
            #line 379 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("(value);\r\n            var actual = instance.ToString();\r\n\r\n            Assert.Are" +
                    "Equal(expected, actual);\r\n        }\r\n\r\n        [TestCase(null, \"");
            
            #line 385 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Symbol));
            
            #line default
            #line hidden
            this.Write(@" {0}"")]
        [TestCase("""", """")]
        [TestCase(""{0:000000}"", ""{0:000000}"")]
        [TestCase(""{0:00} k"", ""{0:00} k"")]
        [TestCase(""({0:#,##0})"", ""({0:#,##0})"")]
        public void Should_format_string(string format, string mask) {
            var expected = string.Format(Consts.CultureEnUS, mask, 1.7578m);

            var instance = new ");
            
            #line 393 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write(@"(1.7578m);
            var actual = instance.ToString(format, Consts.CultureEnUS);

            Assert.AreEqual(expected, actual);
        }

        [TestCaseSource(nameof(CasesValues))]
        public void Should_own_a_HashCode(decimal value) {
            var expected = value.GetHashCode();

            var instance = new ");
            
            #line 403 "C:\Users\calie\code\SystemOfUnits\src\SystemOfUnitsGenerator\GeneratorsCurrency\Templates\TestClassTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CodeClass.Class));
            
            #line default
            #line hidden
            this.Write("(value);\r\n            var actual = instance.GetHashCode();\r\n\r\n            Assert." +
                    "AreEqual(expected, actual);\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class TestClassTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
